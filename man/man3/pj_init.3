.\" @(#)pj_init.3 - 4.1
.nr LL 5.5i
.TH PJ_INIT 3U "2000/03/21 Rel. 4.4" 
.ad b
.hy 1
.SH NAME
pj_init \- initialize cartographic projection
.br
pj_fwd \- forward cartographic projection
.br
pj_inv \- inverse cartographic projection
.br
pj_free \- de-initialize projection
.SH SYNOPSIS
.nf
#include <projects.h>

PJ *pj_init(int argc, char **argv)

projUV pj_fwd(projUV val, PJ *proj)

projUV pj_inv(projUV val, PJ *proj)

int pj_transform(PJ *src_cs, PJ *dst_cs, long point_count, 
                 double *x, double *y, double *z)
               
void pj_free(PJ *proj)

.SH DESCRIPTION
Procedure \fBpj_init\fR selects and initializes a cartographic projection
with its argument control parameters.
\fBArgc\fR is the number of elements in the array of control strings
\fBargv\fR that each contain individual cartographic control keyword
assignments (\f(CW+\fR \fBproj\fR arguments).
The list must contain at least the \fBproj=\fIprojection\fR and
Earth's radius or elliptical parameters.
If the initialization of the projection is successful a valid
address is returned otherwise a NULL value.

Once initialization is performed either forward or inverse
projections can be performed with the returned value of \fBpj_init\fR
used as the argument \fBproj\fR.
The argument structure \fBprojUV\fR values \fBu\fR and \fBv\fR contain
respective longitude and latitude or x and y.
Latitude and longitude are in radians.
If a projection operation fails, both elements of \fBprojUV\fR are
set to HUGE_VAL (defined in \fImath.h\fR).

\fBNote:\fR all projections have a forward mode, but some do not have
an inverse projection.
If the projection does not have an inverse the PJ structure element
\fIinv\fR will be NULL.

The \fBpj_transform\fR function may be used to transform points between
the two provided coordinate systems.  In addition to converting between
cartographic projection coordinates and geographic coordinates, this function
also takes care of datum shifts if possible between the source and destination
coordinate system.  Unlike \fBpj_fwd\fR and \fBpj_inv\fR it is also allowable
for the coordinate system definitions (\fBPJ *\fR) to be geographic coordinate
systems (defined as +proj=latlong).  The \fBx\fR, \fBy\fR and \fBz\fR arrays
contain the input values of the points, and are replaced with the output
values.  The function returns zero on success, or the error number (also in
pj_errno) on failure.

Memory associated with the projection may be freed with \fBpj_free\fR.
.SH EXAMPLE
The following program reads latitude and longitude values in decimal
degress, performs Mercator projection with a Clarke 1866 ellipsoid and
a 33\(de latitude of true scale and prints the projected
cartesian values in meters:
.nf
\f(CW
#include <projects.h>
main(int argc, char **argv) {
	char *args[] = { "proj=merc", "ellps=clrk66", "lat_ts=33" };
	projUV p;
	PJ *pj;

	if (!(pj = pj_init(3, args)))
	   exit(1);
	while (scanf("%lf %lf", &p.v, &p.u) == 2) {
	   p.u *= DEG_TO_RAD;
	   p.v *= DEG_TO_RAD;
	   p = pj_fwd(p, pj);
	   printf("%.2f\et%.2f\en", p.u, p.v);
	}
	exit(0);
} \fR
.br
.fi
.SH LIBRARY
libproj.a \- library of projections and support procedures
.SH SEE ALSO
.B proj(1U),
.br
.I "Cartographic Projection Procedures for the UNIX Environment\(emA User's Manual,"
(Evenden, 1990, Open-file report 90\-284).
.SH HOME PAGE
http://www.remotesensing.org/proj

